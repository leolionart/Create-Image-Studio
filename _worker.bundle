------formdata-undici-080474762333
Content-Disposition: form-data; name="metadata"

{"main_module":"functionsWorker-0.7242581798292872.js"}
------formdata-undici-080474762333
Content-Disposition: form-data; name="functionsWorker-0.7242581798292872.js"; filename="functionsWorker-0.7242581798292872.js"
Content-Type: application/javascript+module

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// utils/logger.ts
var Logger = class _Logger {
  static {
    __name(this, "Logger");
  }
  constructor() {
    this.requestId = this.generateRequestId();
    this.startTime = Date.now();
  }
  static getInstance() {
    if (!_Logger.instance) {
      _Logger.instance = new _Logger();
    }
    return _Logger.instance;
  }
  generateRequestId() {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  }
  getRequestId() {
    return this.requestId;
  }
  getElapsedTime() {
    return Date.now() - this.startTime;
  }
  createLogEntry(level, message, context) {
    return {
      level,
      message,
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      context,
      requestId: this.requestId
    };
  }
  log(entry) {
    const logMessage = JSON.stringify(entry);
    switch (entry.level) {
      case "error":
        console.error(logMessage);
        break;
      case "warn":
        console.warn(logMessage);
        break;
      case "debug":
        console.debug(logMessage);
        break;
      default:
        console.log(logMessage);
    }
  }
  info(message, context) {
    this.log(this.createLogEntry("info", message, context));
  }
  warn(message, context) {
    this.log(this.createLogEntry("warn", message, context));
  }
  error(message, context) {
    this.log(this.createLogEntry("error", message, context));
  }
  debug(message, context) {
    this.log(this.createLogEntry("debug", message, context));
  }
  logRequest(request) {
    const url = new URL(request.url);
    const requestInfo = {
      method: request.method,
      url: url.pathname + url.search,
      headers: Object.fromEntries(request.headers.entries()),
      userAgent: request.headers.get("user-agent") || void 0,
      ip: request.headers.get("cf-connecting-ip") || request.headers.get("x-forwarded-for") || "unknown",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    this.info("Request received", {
      request: requestInfo
    });
  }
  logResponse(response, additionalContext) {
    this.info("Response sent", {
      response: {
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries())
      },
      elapsedTime: this.getElapsedTime(),
      ...additionalContext
    });
  }
  logApiCall(apiName, endpoint, duration, success, error) {
    this.info("API call completed", {
      api: apiName,
      endpoint,
      duration,
      success,
      error
    });
  }
  logError(error, context) {
    this.error(error.message, {
      ...context,
      stack: error.stack,
      name: error.name
    });
  }
  logPerformance(operation, duration, context) {
    this.info("Performance metric", {
      operation,
      duration,
      ...context
    });
  }
  reset() {
    this.requestId = this.generateRequestId();
    this.startTime = Date.now();
  }
};
var withLogger = /* @__PURE__ */ __name((handler) => {
  return async (request, env, ctx) => {
    const logger = Logger.getInstance();
    logger.reset();
    try {
      logger.logRequest(request);
      const response = await handler(request, env, ctx, logger);
      logger.logResponse(response);
      return response;
    } catch (error) {
      logger.logError(error);
      throw error;
    }
  };
}, "withLogger");

// utils/errorHandler.ts
var AppError = class extends Error {
  static {
    __name(this, "AppError");
  }
  constructor(message, statusCode = 500, code = "INTERNAL_ERROR", isOperational = true, details) {
    super(message);
    this.statusCode = statusCode;
    this.code = code;
    this.isOperational = isOperational;
    this.details = details;
    Error.captureStackTrace(this, this.constructor);
  }
};
var ValidationError = class extends AppError {
  static {
    __name(this, "ValidationError");
  }
  constructor(message, details) {
    super(message, 400, "VALIDATION_ERROR", true, details);
  }
};
var RateLimitError = class extends AppError {
  static {
    __name(this, "RateLimitError");
  }
  constructor(message = "Rate limit exceeded", retryAfter) {
    super(message, 429, "RATE_LIMIT_ERROR", true, { retryAfter });
  }
};
var ExternalServiceError = class extends AppError {
  static {
    __name(this, "ExternalServiceError");
  }
  constructor(service, message, statusCode = 502) {
    super(`${service} error: ${message}`, statusCode, "EXTERNAL_SERVICE_ERROR", true, { service });
  }
};
var createApiError = /* @__PURE__ */ __name((message, statusCode = 500, code = "INTERNAL_ERROR", details) => {
  return {
    code,
    message,
    details,
    timestamp: (/* @__PURE__ */ new Date()).toISOString()
  };
}, "createApiError");
var createErrorResponse = /* @__PURE__ */ __name((error, requestId) => {
  let statusCode = 500;
  let apiError;
  if (error instanceof AppError) {
    statusCode = error.statusCode;
    apiError = createApiError(error.message, statusCode, error.code, error.details);
  } else if (error instanceof Error) {
    apiError = createApiError(error.message, statusCode, "INTERNAL_ERROR");
  } else {
    apiError = error;
    statusCode = 500;
  }
  const errorResponse = {
    success: false,
    error: apiError.message,
    timestamp: apiError.timestamp
  };
  if (requestId) {
    errorResponse.error = `[${requestId}] ${errorResponse.error}`;
  }
  console.error("API Error:", JSON.stringify({
    ...apiError,
    requestId,
    stack: error instanceof Error ? error.stack : void 0
  }));
  return new Response(JSON.stringify(errorResponse), {
    status: statusCode,
    headers: {
      "Content-Type": "application/json",
      // Add CORS headers if needed
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type, Authorization"
    }
  });
}, "createErrorResponse");
var handleValidationError = /* @__PURE__ */ __name((message, details) => {
  return createErrorResponse(new ValidationError(message, details));
}, "handleValidationError");
var handleRateLimitError = /* @__PURE__ */ __name((message, retryAfter) => {
  return createErrorResponse(new RateLimitError(message, retryAfter));
}, "handleRateLimitError");

// middleware/auth.ts
var rateLimitStore = /* @__PURE__ */ new Map();
var RATE_LIMIT_CONFIG = {
  windowMs: 60 * 1e3,
  // 1 minute
  maxRequests: 30,
  // 30 requests per minute per IP
  trustProxy: true
};
var getRateLimitInfo = /* @__PURE__ */ __name((ip) => {
  const now = Date.now();
  const windowStart = now - RATE_LIMIT_CONFIG.windowMs;
  for (const [key, value] of rateLimitStore.entries()) {
    if (value.resetTime < now) {
      rateLimitStore.delete(key);
    }
  }
  let entry = rateLimitStore.get(ip);
  if (!entry || entry.resetTime < now) {
    entry = {
      count: 0,
      resetTime: now + RATE_LIMIT_CONFIG.windowMs
    };
    rateLimitStore.set(ip, entry);
  }
  entry.count++;
  const remaining = Math.max(0, RATE_LIMIT_CONFIG.maxRequests - entry.count);
  const success = entry.count <= RATE_LIMIT_CONFIG.maxRequests;
  const retryAfter = success ? void 0 : Math.ceil((entry.resetTime - now) / 1e3);
  return {
    success,
    limit: RATE_LIMIT_CONFIG.maxRequests,
    remaining,
    reset: entry.resetTime,
    retryAfter
  };
}, "getRateLimitInfo");
var setRateLimitHeaders = /* @__PURE__ */ __name((response, rateLimitInfo) => {
  response.headers.set("X-RateLimit-Limit", rateLimitInfo.limit.toString());
  response.headers.set("X-RateLimit-Remaining", rateLimitInfo.remaining.toString());
  response.headers.set("X-RateLimit-Reset", rateLimitInfo.reset.toString());
  if (rateLimitInfo.retryAfter) {
    response.headers.set("Retry-After", rateLimitInfo.retryAfter.toString());
  }
  return response;
}, "setRateLimitHeaders");
var rateLimitMiddleware = /* @__PURE__ */ __name((request, logger) => {
  const ip = request.headers.get("cf-connecting-ip") || request.headers.get("x-forwarded-for") || "unknown";
  logger.debug("Rate limit check", { ip });
  const rateLimitInfo = getRateLimitInfo(ip);
  if (!rateLimitInfo.success) {
    logger.warn("Rate limit exceeded", {
      ip,
      limit: rateLimitInfo.limit,
      reset: rateLimitInfo.reset,
      retryAfter: rateLimitInfo.retryAfter
    });
    const errorResponse = handleRateLimitError(
      "Too many requests. Please try again later.",
      rateLimitInfo.retryAfter
    );
    return setRateLimitHeaders(errorResponse, rateLimitInfo);
  }
  logger.debug("Rate limit check passed", {
    ip,
    remaining: rateLimitInfo.remaining
  });
  return null;
}, "rateLimitMiddleware");
var validateApiKey = /* @__PURE__ */ __name((request, env, logger) => {
  logger.debug("API key validation skipped");
  return null;
}, "validateApiKey");
var corsMiddleware = /* @__PURE__ */ __name((request) => {
  const origin = request.headers.get("Origin");
  const method = request.method;
  if (method === "OPTIONS") {
    const response = new Response(null, { status: 200 });
    response.headers.set("Access-Control-Allow-Origin", "*");
    response.headers.set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
    response.headers.set("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Requested-With");
    response.headers.set("Access-Control-Max-Age", "86400");
    return response;
  }
  return null;
}, "corsMiddleware");
var securityHeadersMiddleware = /* @__PURE__ */ __name((response) => {
  response.headers.set("X-Content-Type-Options", "nosniff");
  response.headers.set("X-Frame-Options", "DENY");
  response.headers.set("X-XSS-Protection", "1; mode=block");
  response.headers.set("Referrer-Policy", "strict-origin-when-cross-origin");
  response.headers.set("Permissions-Policy", "camera=(), microphone=(), geolocation=()");
  response.headers.set("Access-Control-Allow-Origin", "*");
  response.headers.set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
  response.headers.set("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Requested-With");
  return response;
}, "securityHeadersMiddleware");
var authMiddleware = /* @__PURE__ */ __name((request, env, logger) => {
  const corsResponse = corsMiddleware(request);
  if (corsResponse) return corsResponse;
  const rateLimitResponse = rateLimitMiddleware(request, logger);
  if (rateLimitResponse) return rateLimitResponse;
  const authResponse = validateApiKey(request, env, logger);
  if (authResponse) return authResponse;
  return null;
}, "authMiddleware");
var withAuth = /* @__PURE__ */ __name((handler) => {
  return async (request, env, ctx, logger) => {
    const middlewareResponse = authMiddleware(request, env, logger);
    if (middlewareResponse) return middlewareResponse;
    const response = await handler(request, env, ctx, logger);
    return securityHeadersMiddleware(response);
  };
}, "withAuth");

// api/config.ts
var getApiKey = /* @__PURE__ */ __name((env) => {
  return env.GEMINI_API_KEY || env.VITE_GEMINI_API_KEY;
}, "getApiKey");
var validateApiKey2 = /* @__PURE__ */ __name((apiKey) => {
  if (!apiKey) return false;
  const geminiKeyPattern = /^AIza[A-Za-z0-9_-]{35}$/;
  return geminiKeyPattern.test(apiKey);
}, "validateApiKey");
var getConfig = /* @__PURE__ */ __name((env) => {
  const apiKey = getApiKey(env);
  const isApiKeyValid = validateApiKey2(apiKey);
  return {
    apiVersion: "1.0.0",
    features: {
      imageGeneration: isApiKeyValid,
      imageEditing: isApiKeyValid,
      rateLimiting: true,
      logging: true
    },
    limits: {
      maxImageSize: 10 * 1024 * 1024,
      // 10MB
      maxPromptLength: 2e3,
      requestsPerMinute: 30
    }
  };
}, "getConfig");
var onRequestGet = withLogger(withAuth(async (request, env, ctx, logger) => {
  logger.info("Config endpoint accessed");
  try {
    const config = getConfig(env);
    const apiKey = getApiKey(env);
    if (!apiKey) {
      logger.warn("API key not configured");
      return handleValidationError("API key not configured");
    }
    if (!validateApiKey2(apiKey)) {
      logger.error("Invalid API key format");
      return handleValidationError("Invalid API key format");
    }
    const response = {
      success: true,
      data: config,
      message: "Configuration retrieved successfully",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    logger.info("Configuration retrieved successfully", {
      features: config.features,
      limits: config.limits
    });
    return new Response(JSON.stringify(response), {
      status: 200,
      headers: {
        "Content-Type": "application/json"
      }
    });
  } catch (error) {
    logger.error("Error retrieving configuration", { error: error.message });
    throw error;
  }
}));
var onRequestPost = withLogger(withAuth(async (request, env, ctx, logger) => {
  logger.info("Config validation endpoint accessed");
  try {
    const apiKey = getApiKey(env);
    if (!apiKey) {
      logger.warn("API key not configured");
      return handleValidationError("API key not configured");
    }
    if (!validateApiKey2(apiKey)) {
      logger.error("Invalid API key format");
      return handleValidationError("Invalid API key format");
    }
    const testResponse = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${apiKey}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json"
      }
    });
    const isValidKey = testResponse.ok;
    const response = {
      success: true,
      data: { keyValid: isValidKey },
      message: isValidKey ? "API key is valid" : "API key validation failed",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    logger.info("API key validation completed", {
      isValidKey,
      status: testResponse.status
    });
    return new Response(JSON.stringify(response), {
      status: isValidKey ? 200 : 400,
      headers: {
        "Content-Type": "application/json"
      }
    });
  } catch (error) {
    logger.error("Error validating configuration", { error: error.message });
    const response = {
      success: false,
      data: { keyValid: false },
      error: "Failed to validate API key",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    return new Response(JSON.stringify(response), {
      status: 500,
      headers: {
        "Content-Type": "application/json"
      }
    });
  }
}));
var onRequestOptions = withLogger(withAuth(async (request, env, ctx, logger) => {
  logger.debug("Config CORS preflight request");
  return new Response(null, {
    status: 200,
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type, Authorization",
      "Access-Control-Max-Age": "86400"
    }
  });
}));

// api/gemini.ts
var JSON_HEADERS = { "Content-Type": "application/json" };
var parseRequest = /* @__PURE__ */ __name(async (request) => {
  try {
    return await request.json();
  } catch {
    return null;
  }
}, "parseRequest");
var sendJson = /* @__PURE__ */ __name((body, status = 200) => {
  return new Response(JSON.stringify(body), {
    status,
    headers: JSON_HEADERS
  });
}, "sendJson");
var validateEditImagePayload = /* @__PURE__ */ __name((payload) => {
  if (!payload.prompt || !Array.isArray(payload.images) || payload.images.length === 0) {
    throw new ValidationError("Invalid payload for edit action. Prompt and at least one image are required.");
  }
  for (const image of payload.images) {
    if (!image?.base64 || !image?.mimeType) {
      throw new ValidationError("Each image must include base64 data and mimeType.");
    }
  }
}, "validateEditImagePayload");
var validateGenerateImagePayload = /* @__PURE__ */ __name((payload) => {
  if (!payload.prompt) {
    throw new ValidationError("Prompt is required for generate action.");
  }
}, "validateGenerateImagePayload");
var handleEditImage = /* @__PURE__ */ __name(async (payload, apiKey, logger) => {
  const startTime = Date.now();
  try {
    logger.info("Processing image edit request", {
      promptLength: payload.prompt?.length,
      imageCount: payload.images?.length
    });
    validateEditImagePayload(payload);
    const parts = [
      ...payload.images.map((image) => ({
        inlineData: {
          data: image.base64,
          mimeType: image.mimeType
        }
      })),
      { text: payload.prompt }
    ];
    const requestInit = {
      method: "POST",
      headers: JSON_HEADERS,
      body: JSON.stringify({
        contents: [
          {
            role: "user",
            parts
          }
        ],
        generationConfig: {
          responseModalities: ["IMAGE", "TEXT"]
        }
      }),
      cf: {
        cacheTtl: 0,
        cacheEverything: false,
        colocationOverride: "IAD"
      }
    };
    const upstream = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image:generateContent?key=${apiKey}`, requestInit);
    const data = await upstream.json();
    const responseTime = Date.now() - startTime;
    logger.logApiCall("Gemini Image Edit", "gemini-2.5-flash-image", responseTime, upstream.ok);
    if (!upstream.ok) {
      const message = data?.error?.message || "Gemini image edit failed.";
      logger.error("Gemini image edit API error", {
        status: upstream.status,
        message,
        responseTime
      });
      throw new ExternalServiceError("Gemini API", message, upstream.status);
    }
    let textResult = null;
    let imageResult = null;
    const candidate = data?.candidates?.[0];
    const contentParts = candidate?.content?.parts;
    if (Array.isArray(contentParts)) {
      for (const part of contentParts) {
        if (typeof part.text === "string") {
          textResult = part.text;
        } else if (part.inlineData?.data) {
          imageResult = part.inlineData.data;
        }
      }
    } else if (typeof data?.text === "string") {
      textResult = data.text;
    }
    if (!imageResult && !textResult) {
      logger.warn("No content generated from Gemini API");
      throw new ExternalServiceError("Gemini API", "No content generated.", 502);
    }
    const response = {
      success: true,
      data: { text: textResult, imageBase64: imageResult },
      message: "Image edited successfully",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    logger.info("Image edit completed successfully", {
      hasText: !!textResult,
      hasImage: !!imageResult,
      responseTime
    });
    return sendJson(response);
  } catch (error) {
    const responseTime = Date.now() - startTime;
    logger.error("Image edit failed", {
      error: error.message,
      responseTime
    });
    throw error;
  }
}, "handleEditImage");
var handleGenerateImage = /* @__PURE__ */ __name(async (payload, apiKey, logger) => {
  const startTime = Date.now();
  try {
    logger.info("Processing image generation request", {
      promptLength: payload.prompt?.length
    });
    validateGenerateImagePayload(payload);
    const requestInit = {
      method: "POST",
      headers: JSON_HEADERS,
      body: JSON.stringify({
        prompt: payload.prompt,
        config: {
          numberOfImages: 1,
          outputMimeType: "image/jpeg"
        }
      }),
      cf: {
        cacheTtl: 0,
        cacheEverything: false,
        colocationOverride: "IAD"
      }
    };
    const upstream = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/imagen-4.0-generate-001:generateImage?key=${apiKey}`, requestInit);
    const data = await upstream.json();
    const responseTime = Date.now() - startTime;
    logger.logApiCall("Gemini Image Generation", "imagen-4.0-generate-001", responseTime, upstream.ok);
    if (!upstream.ok) {
      const message = data?.error?.message || "Gemini image generation failed.";
      logger.error("Gemini image generation API error", {
        status: upstream.status,
        message,
        responseTime
      });
      throw new ExternalServiceError("Gemini API", message, upstream.status);
    }
    const imageBase64 = data?.generatedImages?.[0]?.image?.imageBytes ?? null;
    if (!imageBase64) {
      logger.warn("No image generated from Gemini API");
      throw new ExternalServiceError("Gemini API", "No image generated.", 502);
    }
    const response = {
      success: true,
      data: { text: null, imageBase64 },
      message: "Image generated successfully",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    logger.info("Image generation completed successfully", {
      responseTime
    });
    return sendJson(response);
  } catch (error) {
    const responseTime = Date.now() - startTime;
    logger.error("Image generation failed", {
      error: error.message,
      responseTime
    });
    throw error;
  }
}, "handleGenerateImage");
var onRequestPost2 = withLogger(withAuth(async (request, env, ctx, logger) => {
  logger.info("Gemini API endpoint accessed");
  try {
    const payload = await parseRequest(request);
    if (!payload) {
      logger.warn("Invalid JSON body received");
      return handleValidationError("Invalid JSON body.");
    }
    const apiKey = getApiKey(env);
    if (!apiKey) {
      logger.error("Gemini API key is not configured");
      return createErrorResponse(new Error("Server is not configured with an API key."), logger.getRequestId());
    }
    if (!validateApiKey2(apiKey)) {
      logger.error("Invalid Gemini API key format");
      return createErrorResponse(new Error("Invalid API key format."), logger.getRequestId());
    }
    if (payload.action === "edit") {
      return handleEditImage(payload, apiKey, logger);
    }
    if (payload.action === "generate") {
      return handleGenerateImage(payload, apiKey, logger);
    }
    logger.warn("Unsupported action requested", { action: payload.action });
    return handleValidationError("Unsupported action.");
  } catch (error) {
    logger.error("Request processing failed", {
      error: error.message,
      stack: error.stack
    });
    if (error instanceof ValidationError || error instanceof ExternalServiceError) {
      return createErrorResponse(error, logger.getRequestId());
    }
    return createErrorResponse(error, logger.getRequestId());
  }
}));
var onRequestOptions2 = withLogger(withAuth(async (request, env, ctx, logger) => {
  logger.debug("Gemini API CORS preflight request");
  return new Response(null, {
    status: 200,
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "POST, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type, Authorization",
      "Access-Control-Max-Age": "86400"
    }
  });
}));

// api/health.ts
var checkGeminiApiHealth = /* @__PURE__ */ __name(async (apiKey, logger) => {
  const startTime = Date.now();
  try {
    logger.debug("Checking Gemini API health");
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${apiKey}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json"
      }
    });
    const responseTime = Date.now() - startTime;
    if (response.ok) {
      logger.info("Gemini API health check passed", { responseTime });
      return {
        status: "available",
        responseTime
      };
    } else {
      const errorData = await response.json().catch(() => ({}));
      const errorMessage = errorData?.error?.message || `HTTP ${response.status}`;
      logger.warn("Gemini API health check failed", {
        status: response.status,
        error: errorMessage,
        responseTime
      });
      return {
        status: "unavailable",
        responseTime,
        error: errorMessage
      };
    }
  } catch (error) {
    const responseTime = Date.now() - startTime;
    const errorMessage = error.message;
    logger.error("Gemini API health check error", {
      error: errorMessage,
      responseTime
    });
    return {
      status: "unavailable",
      responseTime,
      error: errorMessage
    };
  }
}, "checkGeminiApiHealth");
var getUptime = /* @__PURE__ */ __name(() => {
  return Math.floor(Math.random() * 86400);
}, "getUptime");
var onRequestGet2 = withLogger(withAuth(async (request, env, ctx, logger) => {
  logger.info("Health check endpoint accessed");
  try {
    const startTime = Date.now();
    const apiKey = getApiKey(env);
    let geminiApiHealth = {
      status: "unavailable",
      error: "API key not configured"
    };
    if (apiKey && validateApiKey2(apiKey)) {
      geminiApiHealth = await checkGeminiApiHealth(apiKey, logger);
    } else if (apiKey) {
      geminiApiHealth = {
        status: "unavailable",
        error: "Invalid API key format"
      };
    }
    const overallStatus = geminiApiHealth.status === "available" ? "healthy" : "unhealthy";
    const responseTime = Date.now() - startTime;
    const healthResult = {
      status: overallStatus,
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      version: "1.0.0",
      services: {
        geminiApi: geminiApiHealth
      },
      uptime: getUptime()
    };
    const response = {
      success: overallStatus === "healthy",
      data: healthResult,
      message: overallStatus === "healthy" ? "All services are operating normally" : "Some services are experiencing issues",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    logger.info("Health check completed", {
      status: overallStatus,
      responseTime,
      geminiApiStatus: geminiApiHealth.status
    });
    return new Response(JSON.stringify(response), {
      status: overallStatus === "healthy" ? 200 : 503,
      headers: {
        "Content-Type": "application/json",
        "Cache-Control": "no-cache, no-store, must-revalidate",
        "Pragma": "no-cache",
        "Expires": "0"
      }
    });
  } catch (error) {
    logger.error("Health check failed", { error: error.message });
    const healthResult = {
      status: "unhealthy",
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      version: "1.0.0",
      services: {
        geminiApi: {
          status: "unavailable",
          error: error.message
        }
      },
      uptime: getUptime()
    };
    const response = {
      success: false,
      data: healthResult,
      error: "Health check failed",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    return new Response(JSON.stringify(response), {
      status: 503,
      headers: {
        "Content-Type": "application/json",
        "Cache-Control": "no-cache, no-store, must-revalidate",
        "Pragma": "no-cache",
        "Expires": "0"
      }
    });
  }
}));
var onRequestHead = withLogger(withAuth(async (request, env, ctx, logger) => {
  logger.debug("Health check HEAD request");
  try {
    const apiKey = getApiKey(env);
    if (!apiKey || !validateApiKey2(apiKey)) {
      return new Response(null, { status: 503 });
    }
    const geminiHealth = await checkGeminiApiHealth(apiKey, logger);
    const status = geminiHealth.status === "available" ? 200 : 503;
    return new Response(null, { status });
  } catch (error) {
    logger.error("Health check HEAD request failed", { error: error.message });
    return new Response(null, { status: 503 });
  }
}));
var onRequestOptions3 = withLogger(withAuth(async (request, env, ctx, logger) => {
  logger.debug("Health check CORS preflight request");
  return new Response(null, {
    status: 200,
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, HEAD, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type, Authorization",
      "Access-Control-Max-Age": "86400"
    }
  });
}));

// ../.wrangler/tmp/pages-b8gQC1/functionsRoutes-0.05342417766854202.mjs
var routes = [
  {
    routePath: "/api/config",
    mountPath: "/api",
    method: "GET",
    middlewares: [],
    modules: [onRequestGet]
  },
  {
    routePath: "/api/config",
    mountPath: "/api",
    method: "OPTIONS",
    middlewares: [],
    modules: [onRequestOptions]
  },
  {
    routePath: "/api/config",
    mountPath: "/api",
    method: "POST",
    middlewares: [],
    modules: [onRequestPost]
  },
  {
    routePath: "/api/gemini",
    mountPath: "/api",
    method: "OPTIONS",
    middlewares: [],
    modules: [onRequestOptions2]
  },
  {
    routePath: "/api/gemini",
    mountPath: "/api",
    method: "POST",
    middlewares: [],
    modules: [onRequestPost2]
  },
  {
    routePath: "/api/health",
    mountPath: "/api",
    method: "GET",
    middlewares: [],
    modules: [onRequestGet2]
  },
  {
    routePath: "/api/health",
    mountPath: "/api",
    method: "HEAD",
    middlewares: [],
    modules: [onRequestHead]
  },
  {
    routePath: "/api/health",
    mountPath: "/api",
    method: "OPTIONS",
    middlewares: [],
    modules: [onRequestOptions3]
  }
];

// ../../../../../../opt/homebrew/lib/node_modules/wrangler/node_modules/path-to-regexp/dist.es2015/index.js
function lexer(str) {
  var tokens = [];
  var i = 0;
  while (i < str.length) {
    var char = str[i];
    if (char === "*" || char === "+" || char === "?") {
      tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
      continue;
    }
    if (char === "\\") {
      tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
      continue;
    }
    if (char === "{") {
      tokens.push({ type: "OPEN", index: i, value: str[i++] });
      continue;
    }
    if (char === "}") {
      tokens.push({ type: "CLOSE", index: i, value: str[i++] });
      continue;
    }
    if (char === ":") {
      var name = "";
      var j = i + 1;
      while (j < str.length) {
        var code = str.charCodeAt(j);
        if (
          // `0-9`
          code >= 48 && code <= 57 || // `A-Z`
          code >= 65 && code <= 90 || // `a-z`
          code >= 97 && code <= 122 || // `_`
          code === 95
        ) {
          name += str[j++];
          continue;
        }
        break;
      }
      if (!name)
        throw new TypeError("Missing parameter name at ".concat(i));
      tokens.push({ type: "NAME", index: i, value: name });
      i = j;
      continue;
    }
    if (char === "(") {
      var count = 1;
      var pattern = "";
      var j = i + 1;
      if (str[j] === "?") {
        throw new TypeError('Pattern cannot start with "?" at '.concat(j));
      }
      while (j < str.length) {
        if (str[j] === "\\") {
          pattern += str[j++] + str[j++];
          continue;
        }
        if (str[j] === ")") {
          count--;
          if (count === 0) {
            j++;
            break;
          }
        } else if (str[j] === "(") {
          count++;
          if (str[j + 1] !== "?") {
            throw new TypeError("Capturing groups are not allowed at ".concat(j));
          }
        }
        pattern += str[j++];
      }
      if (count)
        throw new TypeError("Unbalanced pattern at ".concat(i));
      if (!pattern)
        throw new TypeError("Missing pattern at ".concat(i));
      tokens.push({ type: "PATTERN", index: i, value: pattern });
      i = j;
      continue;
    }
    tokens.push({ type: "CHAR", index: i, value: str[i++] });
  }
  tokens.push({ type: "END", index: i, value: "" });
  return tokens;
}
__name(lexer, "lexer");
function parse(str, options) {
  if (options === void 0) {
    options = {};
  }
  var tokens = lexer(str);
  var _a = options.prefixes, prefixes = _a === void 0 ? "./" : _a, _b = options.delimiter, delimiter = _b === void 0 ? "/#?" : _b;
  var result = [];
  var key = 0;
  var i = 0;
  var path = "";
  var tryConsume = /* @__PURE__ */ __name(function(type) {
    if (i < tokens.length && tokens[i].type === type)
      return tokens[i++].value;
  }, "tryConsume");
  var mustConsume = /* @__PURE__ */ __name(function(type) {
    var value2 = tryConsume(type);
    if (value2 !== void 0)
      return value2;
    var _a2 = tokens[i], nextType = _a2.type, index = _a2.index;
    throw new TypeError("Unexpected ".concat(nextType, " at ").concat(index, ", expected ").concat(type));
  }, "mustConsume");
  var consumeText = /* @__PURE__ */ __name(function() {
    var result2 = "";
    var value2;
    while (value2 = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR")) {
      result2 += value2;
    }
    return result2;
  }, "consumeText");
  var isSafe = /* @__PURE__ */ __name(function(value2) {
    for (var _i = 0, delimiter_1 = delimiter; _i < delimiter_1.length; _i++) {
      var char2 = delimiter_1[_i];
      if (value2.indexOf(char2) > -1)
        return true;
    }
    return false;
  }, "isSafe");
  var safePattern = /* @__PURE__ */ __name(function(prefix2) {
    var prev = result[result.length - 1];
    var prevText = prefix2 || (prev && typeof prev === "string" ? prev : "");
    if (prev && !prevText) {
      throw new TypeError('Must have text between two parameters, missing text after "'.concat(prev.name, '"'));
    }
    if (!prevText || isSafe(prevText))
      return "[^".concat(escapeString(delimiter), "]+?");
    return "(?:(?!".concat(escapeString(prevText), ")[^").concat(escapeString(delimiter), "])+?");
  }, "safePattern");
  while (i < tokens.length) {
    var char = tryConsume("CHAR");
    var name = tryConsume("NAME");
    var pattern = tryConsume("PATTERN");
    if (name || pattern) {
      var prefix = char || "";
      if (prefixes.indexOf(prefix) === -1) {
        path += prefix;
        prefix = "";
      }
      if (path) {
        result.push(path);
        path = "";
      }
      result.push({
        name: name || key++,
        prefix,
        suffix: "",
        pattern: pattern || safePattern(prefix),
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    var value = char || tryConsume("ESCAPED_CHAR");
    if (value) {
      path += value;
      continue;
    }
    if (path) {
      result.push(path);
      path = "";
    }
    var open = tryConsume("OPEN");
    if (open) {
      var prefix = consumeText();
      var name_1 = tryConsume("NAME") || "";
      var pattern_1 = tryConsume("PATTERN") || "";
      var suffix = consumeText();
      mustConsume("CLOSE");
      result.push({
        name: name_1 || (pattern_1 ? key++ : ""),
        pattern: name_1 && !pattern_1 ? safePattern(prefix) : pattern_1,
        prefix,
        suffix,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    mustConsume("END");
  }
  return result;
}
__name(parse, "parse");
function match(str, options) {
  var keys = [];
  var re = pathToRegexp(str, keys, options);
  return regexpToFunction(re, keys, options);
}
__name(match, "match");
function regexpToFunction(re, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.decode, decode = _a === void 0 ? function(x) {
    return x;
  } : _a;
  return function(pathname) {
    var m = re.exec(pathname);
    if (!m)
      return false;
    var path = m[0], index = m.index;
    var params = /* @__PURE__ */ Object.create(null);
    var _loop_1 = /* @__PURE__ */ __name(function(i2) {
      if (m[i2] === void 0)
        return "continue";
      var key = keys[i2 - 1];
      if (key.modifier === "*" || key.modifier === "+") {
        params[key.name] = m[i2].split(key.prefix + key.suffix).map(function(value) {
          return decode(value, key);
        });
      } else {
        params[key.name] = decode(m[i2], key);
      }
    }, "_loop_1");
    for (var i = 1; i < m.length; i++) {
      _loop_1(i);
    }
    return { path, index, params };
  };
}
__name(regexpToFunction, "regexpToFunction");
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
__name(escapeString, "escapeString");
function flags(options) {
  return options && options.sensitive ? "" : "i";
}
__name(flags, "flags");
function regexpToRegexp(path, keys) {
  if (!keys)
    return path;
  var groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g;
  var index = 0;
  var execResult = groupsRegex.exec(path.source);
  while (execResult) {
    keys.push({
      // Use parenthesized substring match if available, index otherwise
      name: execResult[1] || index++,
      prefix: "",
      suffix: "",
      modifier: "",
      pattern: ""
    });
    execResult = groupsRegex.exec(path.source);
  }
  return path;
}
__name(regexpToRegexp, "regexpToRegexp");
function arrayToRegexp(paths, keys, options) {
  var parts = paths.map(function(path) {
    return pathToRegexp(path, keys, options).source;
  });
  return new RegExp("(?:".concat(parts.join("|"), ")"), flags(options));
}
__name(arrayToRegexp, "arrayToRegexp");
function stringToRegexp(path, keys, options) {
  return tokensToRegexp(parse(path, options), keys, options);
}
__name(stringToRegexp, "stringToRegexp");
function tokensToRegexp(tokens, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function(x) {
    return x;
  } : _d, _e = options.delimiter, delimiter = _e === void 0 ? "/#?" : _e, _f = options.endsWith, endsWith = _f === void 0 ? "" : _f;
  var endsWithRe = "[".concat(escapeString(endsWith), "]|$");
  var delimiterRe = "[".concat(escapeString(delimiter), "]");
  var route = start ? "^" : "";
  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
    var token = tokens_1[_i];
    if (typeof token === "string") {
      route += escapeString(encode(token));
    } else {
      var prefix = escapeString(encode(token.prefix));
      var suffix = escapeString(encode(token.suffix));
      if (token.pattern) {
        if (keys)
          keys.push(token);
        if (prefix || suffix) {
          if (token.modifier === "+" || token.modifier === "*") {
            var mod = token.modifier === "*" ? "?" : "";
            route += "(?:".concat(prefix, "((?:").concat(token.pattern, ")(?:").concat(suffix).concat(prefix, "(?:").concat(token.pattern, "))*)").concat(suffix, ")").concat(mod);
          } else {
            route += "(?:".concat(prefix, "(").concat(token.pattern, ")").concat(suffix, ")").concat(token.modifier);
          }
        } else {
          if (token.modifier === "+" || token.modifier === "*") {
            throw new TypeError('Can not repeat "'.concat(token.name, '" without a prefix and suffix'));
          }
          route += "(".concat(token.pattern, ")").concat(token.modifier);
        }
      } else {
        route += "(?:".concat(prefix).concat(suffix, ")").concat(token.modifier);
      }
    }
  }
  if (end) {
    if (!strict)
      route += "".concat(delimiterRe, "?");
    route += !options.endsWith ? "$" : "(?=".concat(endsWithRe, ")");
  } else {
    var endToken = tokens[tokens.length - 1];
    var isEndDelimited = typeof endToken === "string" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;
    if (!strict) {
      route += "(?:".concat(delimiterRe, "(?=").concat(endsWithRe, "))?");
    }
    if (!isEndDelimited) {
      route += "(?=".concat(delimiterRe, "|").concat(endsWithRe, ")");
    }
  }
  return new RegExp(route, flags(options));
}
__name(tokensToRegexp, "tokensToRegexp");
function pathToRegexp(path, keys, options) {
  if (path instanceof RegExp)
    return regexpToRegexp(path, keys);
  if (Array.isArray(path))
    return arrayToRegexp(path, keys, options);
  return stringToRegexp(path, keys, options);
}
__name(pathToRegexp, "pathToRegexp");

// ../../../../../../opt/homebrew/lib/node_modules/wrangler/templates/pages-template-worker.ts
var escapeRegex = /[.+?^${}()|[\]\\]/g;
function* executeRequest(request) {
  const requestPath = new URL(request.url).pathname;
  for (const route of [...routes].reverse()) {
    if (route.method && route.method !== request.method) {
      continue;
    }
    const routeMatcher = match(route.routePath.replace(escapeRegex, "\\$&"), {
      end: false
    });
    const mountMatcher = match(route.mountPath.replace(escapeRegex, "\\$&"), {
      end: false
    });
    const matchResult = routeMatcher(requestPath);
    const mountMatchResult = mountMatcher(requestPath);
    if (matchResult && mountMatchResult) {
      for (const handler of route.middlewares.flat()) {
        yield {
          handler,
          params: matchResult.params,
          path: mountMatchResult.path
        };
      }
    }
  }
  for (const route of routes) {
    if (route.method && route.method !== request.method) {
      continue;
    }
    const routeMatcher = match(route.routePath.replace(escapeRegex, "\\$&"), {
      end: true
    });
    const mountMatcher = match(route.mountPath.replace(escapeRegex, "\\$&"), {
      end: false
    });
    const matchResult = routeMatcher(requestPath);
    const mountMatchResult = mountMatcher(requestPath);
    if (matchResult && mountMatchResult && route.modules.length) {
      for (const handler of route.modules.flat()) {
        yield {
          handler,
          params: matchResult.params,
          path: matchResult.path
        };
      }
      break;
    }
  }
}
__name(executeRequest, "executeRequest");
var pages_template_worker_default = {
  async fetch(originalRequest, env, workerContext) {
    let request = originalRequest;
    const handlerIterator = executeRequest(request);
    let data = {};
    let isFailOpen = false;
    const next = /* @__PURE__ */ __name(async (input, init) => {
      if (input !== void 0) {
        let url = input;
        if (typeof input === "string") {
          url = new URL(input, request.url).toString();
        }
        request = new Request(url, init);
      }
      const result = handlerIterator.next();
      if (result.done === false) {
        const { handler, params, path } = result.value;
        const context = {
          request: new Request(request.clone()),
          functionPath: path,
          next,
          params,
          get data() {
            return data;
          },
          set data(value) {
            if (typeof value !== "object" || value === null) {
              throw new Error("context.data must be an object");
            }
            data = value;
          },
          env,
          waitUntil: workerContext.waitUntil.bind(workerContext),
          passThroughOnException: /* @__PURE__ */ __name(() => {
            isFailOpen = true;
          }, "passThroughOnException")
        };
        const response = await handler(context);
        if (!(response instanceof Response)) {
          throw new Error("Your Pages function should return a Response");
        }
        return cloneResponse(response);
      } else if ("ASSETS") {
        const response = await env["ASSETS"].fetch(request);
        return cloneResponse(response);
      } else {
        const response = await fetch(request);
        return cloneResponse(response);
      }
    }, "next");
    try {
      return await next();
    } catch (error) {
      if (isFailOpen) {
        const response = await env["ASSETS"].fetch(request);
        return cloneResponse(response);
      }
      throw error;
    }
  }
};
var cloneResponse = /* @__PURE__ */ __name((response) => (
  // https://fetch.spec.whatwg.org/#null-body-status
  new Response(
    [101, 204, 205, 304].includes(response.status) ? null : response.body,
    response
  )
), "cloneResponse");
export {
  pages_template_worker_default as default
};

------formdata-undici-080474762333--
